"""
Django settings for chaviprom project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""



# Build paths inside the project like this: BASE_DIR / 'subdir'.
from pathlib import Path
BASE_DIR = Path(__file__).resolve().parent.parent

import os
from dotenv import load_dotenv
from django.utils.translation import gettext_lazy as _
import logging
import base64
from cryptography.fernet import Fernet

env_path = os.path.join(BASE_DIR, '.env')
load_dotenv(env_path)



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY','adsfj239048q2389qdjfasdmfa;ldsjkf;askdjf;ad21232312^&%&%%*^%*')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'False') != 'False'

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS','localhost').split(',')

CSRF_TRUSTED_ORIGINS = os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS','*').split(',')


# Application definition

INSTALLED_APPS = [
    'chaviprom.apps.ChavipromConfig',  # Main project app for signals
    'parler', # Using Parler for multilingual support
    #'modeltranslation', # Add before admin see : https://github.com/deschler/django-modeltranslation/issues/408
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
    'secured_fields',
    'django_htmx',
    'crispy_forms',
    'crispy_tailwind',
    'django_cotton',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_email',
    'two_factor',
    'two_factor.plugins.email',
    'schema_viewer',
    'promapp',
    'patientapp',
    'providerapp',
]

MIDDLEWARE = [
    "django_htmx.middleware.HtmxMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "csp.middleware.CSPMiddleware",

]

ROOT_URLCONF = 'chaviprom.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'chaviprom.context_processors.language_fonts',
            ],
        },
    },
]

WSGI_APPLICATION = 'chaviprom.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DJANGO_DATABASE_ENGINE','django.db.backends.sqlite3'),
        'NAME': os.environ.get('DJANGO_DATABASE_NAME','db.sqlite3'),
        'USER': os.environ.get('DJANGO_DATABASE_USER',''),
        'PASSWORD': os.environ.get('DJANGO_DATABASE_PASSWORD',''),
        'HOST': os.environ.get('DJANGO_DATABASE_HOST','localhost'),
        'PORT': os.environ.get('DJANGO_DATABASE_PORT','5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.getenv('DJANGO_LANGUAGE_CODE','en-gb')

TIME_ZONE = os.getenv('DJANGO_TIME_ZONE','UTC')

USE_I18N = True

USE_TZ = True

# Locale paths
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]



# Parse LANGUAGES from environment variable
# Format in .env should be: en:English,de:German,fr:French
language_settings = os.getenv('DJANGO_LANGUAGES', 'en:English')
LANGUAGES = [
    (code.strip(), _(name.strip()))
    for lang in language_settings.split(',')
    for code, name in [lang.split(':', 1)]
]

# Font configuration for different languages
# Parse font settings from environment variable
# Format in .env should be: en-gb:Roboto,bn:Noto+Sans+Bengali,hi:Noto+Sans+Devanagari
font_settings = os.getenv('DJANGO_LANGUAGE_FONTS', 'en-gb:Roboto')
LANGUAGE_FONTS = {}
for font_entry in font_settings.split(','):
    if ':' in font_entry:
        lang_code, font_name = font_entry.split(':', 1)
        LANGUAGE_FONTS[lang_code.strip()] = font_name.strip()

# Default font fallback
DEFAULT_FONT = os.getenv('DJANGO_DEFAULT_FONT', 'Roboto')


# Parler Settings
PARLER_DEFAULT_LANGUAGE = os.getenv('PARLER_DEFAULT_LANGUAGE', 'en')

# Parse Parler languages from environment variable
# Format in .env should be: en,en-us,it,nl
parler_languages = os.getenv('PARLER_LANGUAGES', 'en').split(',')
PARLER_LANGUAGES = {
    None: tuple({'code': code.strip()} for code in parler_languages),
    'default': {
        'fallbacks': [PARLER_DEFAULT_LANGUAGE],
        'hide_untranslated': os.getenv('PARLER_HIDE_UNTRANSLATED', 'False') == 'True',
    }
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Settings for Django secured fields
# Multiple keys can be specified for key rotation, separated by commas
# The first key is used for encryption, all keys are tried for decryption
logger = logging.getLogger(__name__)

def process_key(key_str):
    try:
        # Remove any whitespace and ensure it's a string
        key_str = str(key_str).strip()
        
        # Check if the key is already in the correct format
        try:
            Fernet(key_str.encode())
            return key_str
        except Exception:
            # If not, try to fix it
            # Remove any non-base64 characters
            key_str = ''.join(c for c in key_str if c in '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_=')
            
            # Ensure the key is properly padded
            padding = len(key_str) % 4
            if padding:
                key_str += '=' * (4 - padding)
            
            # Try again with the cleaned key
            Fernet(key_str.encode())
            return key_str
            
    except Exception as e:
        logger.error(f"Error processing key: {e}")
        return None

# Get the key from environment
key = os.getenv('DJANGO_SECURED_FIELDS_KEY')
if not key:
    logger.error("No DJANGO_SECURED_FIELDS_KEY found in environment")
    raise ValueError("DJANGO_SECURED_FIELDS_KEY must be set in environment")

# Process the key
processed_key = process_key(key)
if not processed_key:
    raise ValueError(f"Invalid Fernet key format. The key must be 32 bytes encoded in URL-safe base64 format. Current key: {key}")

SECURED_FIELDS_KEY = [processed_key]

# Crispy Forms Settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

# Authentication settings
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{asctime}] {levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'maxBytes': 1024 * 1024 * 10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'error_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django_error.log'),
            'maxBytes': 1024 * 1024 * 10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
            'level': 'ERROR',
        },
        'promapp_rules_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'promapp_rules.log'),
            'maxBytes': 1024 * 1024 * 10,  # 10MB
            'backupCount': 5,
            'level': 'DEBUG',
            'formatter': 'verbose',
        },
        'security_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'security.log'),
            'maxBytes': 1024 * 1024 * 10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'tfa_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'two_factor_auth.log'),
            'maxBytes': 1024 * 1024 * 10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file', 'error_file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'promapp': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'promapp.rules': {
            'handlers': ['console', 'promapp_rules_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'patientapp': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'providerapp': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'gunicorn': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.views.core': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.views.utils': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.gateways.fake': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.views.profile': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.views.mixins': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.plugins.email': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.plugins.email.forms': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.plugins.email.models': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor.plugins.email.views': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django_otp': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django_otp.plugins.otp_email': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django_otp.plugins.otp_totp': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django_otp.plugins.otp_static': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'two_factor': {
            'handlers': ['console', 'tfa_file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.contrib.auth': {
            'handlers': ['console', 'security_file', 'tfa_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security.csrf': {
            'handlers': ['console', 'security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.security.disallowed_host': {
            'handlers': ['console', 'security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# Static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Django Debug Toolbar settings

DEBUG_TOOLBAR_ENABLED = os.getenv('DJANGO_DEBUG_TOOLBAR_ENABLED', 'False') == 'True'

if DEBUG_TOOLBAR_ENABLED:
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': lambda request: True,
        'SHOW_COLLAPSED': True,
        'SHOW_TEMPLATE_CONTEXT': True,
    }

    INTERNAL_IPS = ['127.0.0.1']

    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.history.HistoryPanel',
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        'debug_toolbar.panels.profiling.ProfilingPanel',
    ]

# Two-factor authentication settings
LOGIN_URL = 'two_factor:login'


# Email settings
EMAIL_BACKEND = os.getenv('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('DJANGO_EMAIL_HOST', 'localhost')
EMAIL_PORT = os.getenv('DJANGO_EMAIL_PORT', 1025)
EMAIL_HOST_USER = os.getenv('DJANGO_EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('DJANGO_EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = os.getenv('DJANGO_EMAIL_USE_TLS', False)


# Default from email address
DEFAULT_FROM_EMAIL = os.getenv('DJANGO_DEFAULT_FROM_EMAIL', 'no-reply@example.com')

# OTP email settings
OTP_EMAIL_SUBJECT = "Your OTP token for CHAVI PROM"
OTP_EMAIL_BODY_TEMPLATE_PATH = os.path.join(BASE_DIR, "templates/otp_email_template.txt")
OTP_EMAIL_BODY_HTML_TEMPLATE_PATH = os.path.join(BASE_DIR, "templates/otp_email_template.html")

# OTP Email sender configuration
OTP_EMAIL_SENDER = DEFAULT_FROM_EMAIL

# OTP Token validity (in seconds) - default is 30 seconds
OTP_TOTP_TOLERANCE = 1  # Allow 1 step tolerance for time drift
OTP_EMAIL_TOKEN_VALIDITY = 300  # 5 minutes

# Additional TFA logging settings
OTP_EMAIL_LOG_LEVEL = 'INFO'  # Log level for OTP email events
OTP_TOTP_LOG_LEVEL = 'INFO'   # Log level for TOTP events

# TFA security settings
TWO_FACTOR_LOGIN_TIMEOUT = 600  # 10 minutes timeout for TFA setup
TWO_FACTOR_REMEMBER_COOKIE_AGE = 60 * 60 * 24 * 30  # 30 days

# Security settings if not development environment
ENVIRONMENT = os.getenv('DJANGO_ENVIRONMENT', 'development')

# Ensure logs directory exists
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

if ENVIRONMENT != 'development':
    SECURE_HSTS_SECONDS = os.getenv('DJANGO_SECURE_HSTS_SECONDS', 3600)
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Content Security Policy (CSP) settings
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",  # Needed for inline scripts in templates
    "'unsafe-eval'",    # Needed for Tailwind CDN runtime compilation
    "https://cdn.tailwindcss.com",  # Tailwind CSS CDN script (temporarily restored)
)
CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",  # Needed for inline styles and Tailwind CSS
    "https://fonts.googleapis.com",  # For Google Fonts CSS
    "https://cdn.tailwindcss.com",  # Tailwind CSS CDN styles (temporarily restored)
)
CSP_FONT_SRC = (
    "'self'",
    "https://fonts.gstatic.com",  # For Google Fonts
    "data:",  # For data URI fonts
)
CSP_IMG_SRC = (
    "'self'",
    "data:",  # For data URI images (QR codes, etc.)
    "blob:",  # For blob images
)
CSP_CONNECT_SRC = (
    "'self'",
    # Add your API endpoints here if needed
)

# Additional security headers
CSP_INCLUDE_NONCE_IN = ['script-src']  # Generate nonces for inline scripts
CSP_REPORT_ONLY = False  # Set to True for testing CSP without blocking
CSP_FRAME_SRC = ("'none'",)  # Prevents your site from being framed
CSP_OBJECT_SRC = ("'none'",)  # Disables plugins like Flash
CSP_BASE_URI = ("'self'",)
CSP_FORM_ACTION = ("'self'",)

# Additional CSP security headers
CSP_UPGRADE_INSECURE_REQUESTS = ENVIRONMENT != 'development'
CSP_BLOCK_ALL_MIXED_CONTENT = ENVIRONMENT != 'development'