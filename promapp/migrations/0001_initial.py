# Generated by Django 5.2.1 on 2025-05-22 13:19

import django.db.models.deletion
import parler.fields
import parler.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patientapp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConstructScale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('instrument_name', models.CharField(blank=True, help_text='The name of the instrument that the construct scale belongs to', max_length=255, null=True)),
                ('instrument_version', models.CharField(blank=True, help_text='The version of the instrument that the construct scale belongs to', max_length=255, null=True)),
                ('scale_equation', models.CharField(blank=True, help_text='The equation to calculate the score for the construct scale from the items in the scale', max_length=255, null=True)),
                ('minimum_number_of_items', models.IntegerField(default=0, help_text='The minimum number of items that must be answered to calculate the score for the construct scale')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Construct Scale',
                'verbose_name_plural': 'Construct Scales',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='LikertScale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('likert_scale_name', models.CharField(blank=True, help_text='The name of the Likert Scale', max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Likert Scale Response',
                'verbose_name_plural': 'Likert Scale Responses',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='RangeScale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('range_scale_name', models.CharField(blank=True, help_text='The name of the Range Scale', max_length=255, null=True)),
                ('max_value', models.DecimalField(blank=True, decimal_places=2, help_text='The maximum value for the range scale', max_digits=10, null=True)),
                ('min_value', models.DecimalField(blank=True, decimal_places=2, help_text='The minimum value for the range scale', max_digits=10, null=True)),
                ('increment', models.DecimalField(blank=True, decimal_places=2, help_text='The increment for the range scale. Must be more than 0', max_digits=10, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Range Scale',
                'verbose_name_plural': 'Range Scales',
                'ordering': ['-created_date'],
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_number', models.IntegerField(blank=True, help_text='The number of the item in the construct scale', null=True)),
                ('response_type', models.CharField(choices=[('Text', 'Text Response'), ('Number', 'Numeric Response'), ('Likert', 'Likert Scale'), ('Range', 'Range Response')], db_index=True, help_text='The type of response for the item', max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('construct_scale', models.ForeignKey(help_text='Each item can belong to a construct scale which is designed to measure a construct or domain related to the Patient Reported Outcome.', on_delete=django.db.models.deletion.CASCADE, to='promapp.constructscale')),
                ('likert_response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='promapp.likertscale')),
                ('range_response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='promapp.rangescale')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'ordering': ['-created_date'],
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LikertScaleResponseOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('option_order', models.IntegerField(blank=True, help_text='The order of the option. This will be a number.', null=True)),
                ('option_value', models.DecimalField(blank=True, decimal_places=2, help_text='The value to store for the option. This will be a number with upto 2 decimal places.', max_digits=10, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('likert_scale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='promapp.likertscale')),
            ],
            options={
                'verbose_name': 'Likert Scale Response Option',
                'verbose_name_plural': 'Likert Scale Response Options',
                'ordering': ['option_order'],
                'unique_together': {('likert_scale', 'option_order', 'option_value')},
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('questionnaire_answer_interval', models.IntegerField(default=0, help_text='The interval in seconds between answering the same questionnaire by the same patient')),
                ('questionnaire_order', models.IntegerField(default=0, help_text='The order of the questionnaire in the list of questionnaires for the patient')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('questionnaire_redirect', models.ForeignKey(blank=True, help_text='The questionnaire to redirect to after the current questionnaire is answered', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='redirect_questionnaire', to='promapp.questionnaire')),
            ],
            options={
                'verbose_name': 'Questionnaire',
                'verbose_name_plural': 'Questionnaires',
                'ordering': ['-created_date'],
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PatientQuestionnaire',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_questionnaire', models.BooleanField(default=False, help_text='If True, the questionnaire is currently will be displayed for the patient')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(help_text='The patient to which the questionnaire belongs', on_delete=django.db.models.deletion.CASCADE, to='patientapp.patient')),
                ('questionnaire', models.ForeignKey(help_text='The questionnaire to which the patient belongs', on_delete=django.db.models.deletion.CASCADE, to='promapp.questionnaire')),
            ],
            options={
                'verbose_name': 'Patient Questionnaire',
                'verbose_name_plural': 'Patient Questionnaires',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_number', models.IntegerField(help_text='The number of the question in the questionnaire')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(help_text='The item to which the response belongs', on_delete=django.db.models.deletion.CASCADE, to='promapp.item')),
                ('questionnaire', models.ForeignKey(help_text='The questionnaire to which the response belongs', on_delete=django.db.models.deletion.CASCADE, to='promapp.questionnaire')),
            ],
            options={
                'verbose_name': 'Questionnaire Item',
                'verbose_name_plural': 'Questionnaire Items',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireItemRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('operator', models.CharField(choices=[('EQUALS', 'Equals'), ('NOT_EQUALS', 'Not Equals'), ('GREATER_THAN', 'Greater Than'), ('LESS_THAN', 'Less Than'), ('GREATER_THAN_EQUALS', 'Greater Than or Equals'), ('LESS_THAN_EQUALS', 'Less Than or Equals'), ('CONTAINS', 'Contains'), ('NOT_CONTAINS', 'Does Not Contain')], help_text='The operator to use for the comparison', max_length=40)),
                ('comparison_value', models.CharField(help_text='The value to compare against', max_length=255)),
                ('logical_operator', models.CharField(choices=[('AND', 'And'), ('OR', 'Or')], default='AND', help_text='How this rule combines with other rules', max_length=3)),
                ('rule_order', models.IntegerField(default=0, help_text='Order in which rules should be evaluated')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('dependent_item', models.ForeignKey(help_text='The previous item whose response determines visibility', on_delete=django.db.models.deletion.CASCADE, related_name='dependent_rules', to='promapp.questionnaireitem')),
                ('questionnaire_item', models.ForeignKey(help_text='The item whose visibility is controlled by this rule', on_delete=django.db.models.deletion.CASCADE, related_name='visibility_rules', to='promapp.questionnaireitem')),
            ],
            options={
                'verbose_name': 'Questionnaire Item Rule',
                'verbose_name_plural': 'Questionnaire Item Rules',
                'ordering': ['rule_order'],
                'unique_together': {('questionnaire_item', 'dependent_item', 'operator', 'comparison_value')},
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireItemRuleGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('group_order', models.IntegerField(default=0)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('questionnaire_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rule_groups', to='promapp.questionnaireitem')),
                ('rules', models.ManyToManyField(related_name='rule_groups', to='promapp.questionnaireitemrule')),
            ],
            options={
                'verbose_name': 'Questionnaire Item Rule Group',
                'verbose_name_plural': 'Questionnaire Item Rule Groups',
                'ordering': ['group_order'],
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('submission_date', models.DateTimeField(auto_now_add=True, help_text='The date and time of the submission')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(help_text='The patient to which the submission belongs', on_delete=django.db.models.deletion.CASCADE, to='patientapp.patient')),
                ('patient_questionnaire', models.ForeignKey(help_text='The patient questionnaire to which the submission belongs', on_delete=django.db.models.deletion.CASCADE, to='promapp.patientquestionnaire')),
            ],
            options={
                'verbose_name': 'Questionnaire Submission',
                'verbose_name_plural': 'Questionnaire Submissions',
                'ordering': ['-submission_date'],
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireItemResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('response_date', models.DateTimeField(auto_now_add=True, help_text='The date and time of the response')),
                ('response_value', models.CharField(blank=True, help_text='The response value', max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('questionnaire_item', models.ForeignKey(help_text='The item to which the response belongs', on_delete=django.db.models.deletion.CASCADE, to='promapp.questionnaireitem')),
                ('questionnaire_submission', models.ForeignKey(help_text='The submission to which the response belongs', on_delete=django.db.models.deletion.CASCADE, to='promapp.questionnairesubmission')),
            ],
            options={
                'verbose_name': 'Questionnaire Response',
                'verbose_name_plural': 'Questionnaire Responses',
                'ordering': ['-response_date'],
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireConstructScore',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.DecimalField(decimal_places=2, help_text='The score for the construct', max_digits=10)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('construct', models.ForeignKey(help_text='The construct to which the score belongs', on_delete=django.db.models.deletion.CASCADE, to='promapp.constructscale')),
                ('questionnaire_submission', models.ForeignKey(help_text='The submission to which the score belongs', on_delete=django.db.models.deletion.CASCADE, to='promapp.questionnairesubmission')),
            ],
            options={
                'verbose_name': 'Questionnaire Construct Score',
                'verbose_name_plural': 'Questionnaire Construct Scores',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='ItemTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(blank=True, db_index=True, help_text='The name of the item which will be displayed to the patient', max_length=255, null=True)),
                ('media', models.FileField(blank=True, help_text='The media to display for the item. This will be an audio, video or image.', null=True, upload_to='item_media/')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='promapp.item')),
            ],
            options={
                'verbose_name': 'Item Translation',
                'db_table': 'promapp_item_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LikertScaleResponseOptionTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('option_text', models.CharField(blank=True, help_text='The text to display for the option', max_length=255, null=True)),
                ('option_media', models.FileField(blank=True, help_text='The media to display for the option. This will be an audio, video or image.', null=True, upload_to='likert_scale_response_options/')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='promapp.likertscaleresponseoption')),
            ],
            options={
                'verbose_name': 'Likert Scale Response Option Translation',
                'db_table': 'promapp_likertscaleresponseoption_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='QuestionnaireTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(blank=True, help_text='The name of the questionnaire', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='The description of the questionnaire', null=True)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='promapp.questionnaire')),
            ],
            options={
                'verbose_name': 'Questionnaire Translation',
                'db_table': 'promapp_questionnaire_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RangeScaleTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('min_value_text', models.CharField(blank=True, help_text='The text to display for the minimum value', max_length=255, null=True)),
                ('max_value_text', models.CharField(blank=True, help_text='The text to display for the maximum value', max_length=255, null=True)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='promapp.rangescale')),
            ],
            options={
                'verbose_name': 'Range Scale Translation',
                'db_table': 'promapp_rangescale_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
    ]
